#!/usr/bin/env bash

CRE=$(tput setaf 1)
CYE=$(tput setaf 3)
CGR=$(tput setaf 2)
CBL=$(tput setaf 4)
BLD=$(tput bold)
CNC=$(tput sgr0)
 
backup_folder=~/.RiceBackup
date=$(date +%Y%m%d-%H%M%S)

logo() {
	local text="${1:?}"
	echo -en "                                 
  	dotfiles\n\n"
	printf ' %s [%s%s %s%s %s]%s\n\n' "${CRE}" "${CNC}" "${CYE}" "${text}"
}

if [ "$(id -u)" = 0 ]; then
	echo "This script MUST NOT be run as root."
	exit 1
fi

# Intro
clear
logo "Welcome!"
printf '%s%sThis script will automatically install fully-featured tiling/floating window manager-based system on any Arch Linux or Arch-based system. \n\nMy dotfiles DO NOT modify any of your system configuration. \nYou will be prompted for your root password to install missing dependencies \n\nThis script doesnt have potential power to break your system, it only copies files from my repo to your HOME directory. %s\n\n' "${BLD}" "${CRE}" "${CNC}"

while true; do
	read -rp " Do you want to continue? [y/n]: " yn
	case $yn in
	[Yy]*) break ;;
	[Nn]*) exit ;;
	*) printf "Just write 'y' or 'n'\n\n" ;;
	esac
done
clear

# Update system
logo "Updating system"
sudo rm -rf /var/lib/pacman/db.lck
sudo pacman -Syu --noconfirm
printf "%s%sDone!!%s\n\n" "${BLD}" "${CGR}" "${CNC}"
sleep 2
clear

# Install X.Org
logo "Installing X.Org"
sudo pacman -S --needed --noconfirm xorg xorg-drivers
printf "%s%sDone!!%s\n\n" "${BLD}" "${CGR}" "${CNC}"
sleep 2
clear

# Install Pipewire (audio)
logo "Installing Pipewire (audio)"
yes y | sudo pacman -S --needed pipewire pipewire-pulse wireplumber
printf "%s%sDone!!%s\n\n" "${BLD}" "${CGR}" "${CNC}"
sleep 2
clear

# Install Yay (AUR helper)
logo "Installing yay"
if command -v yay &>/dev/null; then
	echo "Yay is installed in your system"
else
	sudo pacman -S --needed --noconfirm base-devel && git clone https://aur.archlinux.org/yay.git && cd yay && makepkg -si --noconfirm && cd ..
fi
sleep 2
clear

# Install paru (AUR helper)
logo "Installing paru"
if command -v paru &>/dev/null; then
	echo "paru is installed in your system"
else
	sudo pacman -S --needed --noconfirm base-devel && git clone https://aur.archlinux.org/paru.git && cd paru && makepkg -si --noconfirm && cd ..
fi
sleep 2
clear

# Install packages
logo "Installing needed packages"

dependencies=(kitty zsh bspwm dragon-drop dunst calcurse feh ly pywal-16-colors git gtk-engine-murrine gvfs gvfs-afc gvfs-mtp gvfs-smb htop brave-bin lxappearance mpc mpd mpv ncmpcpp neovim networkmanager pamixer pavucontrol qogir-icon-theme ranger rofi scrot sed sxhkd udisks2 ttf-roboto-mono ttf-roboto-mono-nerd unzip xclip xdg-user-dirs-gtk xorg-xinit zathura zathura-pdf-mupdf zip ttf-maple noto-fonts-emoji ttf-ubuntu-font-family nerd-fonts bibata-cursor-theme betterlockscreen)

is_installed() {
	pacman -Qi "$1" &>/dev/null
	return $?
}

printf "%s%sChecking for required packages%s\n" "${BLD}" "${CBL}" "${CNC}"
for paquete in "${dependencies[@]}"; do
	if ! is_installed "$paquete"; then
		yay -S --noconfirm "$paquete"
		printf "\n"
	else
		printf '%s%s is already installed on your system!%s\n' "${CGR}" "$paquete" "${CNC}"
	fi
done
sleep 2
clear

# Install ZSH 
printf "Installing ohmyzsh..\n"
sh -c ~/dotfiles/shell_config
plugins=(
    https://github.com/zsh-users/zsh-autosuggestions
    https://github.com/zsh-users/zsh-syntax-highlighting.git
    https://github.com/zsh-users/zsh-history-substring-search
    https://github.com/MichaelAquilina/zsh-autoswitch-virtualenv.git
    https://github.com/MichaelAquilina/zsh-you-should-use.git
    https://github.com/MichaelAquilina/zsh-auto-notify.git
)

for plugin in "${plugins[@]}"; do
    repo_name=$(basename "$plugin")
    target_dir=${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/$repo_name

    if [ -d "$target_dir" ]; then
        printf "%s already installed. Skipping.\n" "$repo_name"
    else
        printf "Installing %s...\n" "$repo_name"
        git clone "$plugin" "$target_dir"
    fi
done

printf "Installing prompt (Starship)...\n"
curl -fsSL https://starship.rs/install.sh | bash
sleep 2
clear

# Preparing folders
logo "Preparing Folders"
if [ ! -e $HOME/.config/user-dirs.dirs ]; then
	xdg-user-dirs-update
	echo "Creating xdg-user-dirs"
else
	echo "user-dirs.dirs already exists"
fi
sleep 2
clear

# Downloading dotfiles
logo "Downloading dotfiles"
[ -d ~/dotfiles ] && rm -rf ~/dotfiles
printf "Cloning rice from https://github.com/MineNique/dotfiles\n"
cd
git clone --depth=1 https://github.com/MineNique/dotfiles.git
sleep 2
clear


# Backup dotfiles
logo "Backing-up dotfiles"
printf "Backup files will be stored in %s%s%s/.RiceBackup%s \n\n" "${BLD}" "${CRE}" "$HOME" "${CNC}"
sleep 1

if [ ! -d "$backup_folder" ]; then
	mkdir -p "$backup_folder"
fi

for folder in kitty bspwm btop gtk-2.0 gtk-3.0 gtk-4.0 mpd mpv ncmpcpp nvim picom ranger rofi style style_folder sxhkd zathura; do
	if [ -d "$HOME/.config/$folder" ]; then
		mv "$HOME/.config/$folder" "$backup_folder/${folder}_$date"
		echo "$folder folder backed up successfully at $backup_folder/${folder}_$date"
	else
		echo "The folder $folder does not exist in $HOME/.config/"
	fi
done

[ -f ~/.zshrc ] && mv ~/.zshrc ~/.RiceBackup/.zshrc-backup-"$(date +%Y.%m.%d-%H.%M.%S)"
[ -f ~/.fehbg ] && mv ~/.fehbg ~/.RiceBackup/.fehbg-backup-"$(date +%Y.%m.%d-%H.%M.%S)"
printf "%s%sDone!!%s\n\n" "${BLD}" "${CGR}" "${CNC}"
sleep 2
clear

# Installing dotfiles
logo "Installing dotfiles.."
printf "Copying files to respective directories..\n"

[ ! -d ~/.config ] && mkdir -p ~/.config
[ ! -d ~/.fonts ] && mkdir -p ~/.fonts
[ ! -d ~/.themes ] && mkdir -p ~/.themes
[ ! -d ~/.local/share/applications ] && mkdir -p ~/.local/share/applications

for archivo in ~/dotfiles/config/*; do
    cp -R "$archivo" ~/.config/
    if [ $? -eq 0 ]; then
        printf "%s%s%s folder copied successfully!%s\n" "$BLD" "$CGR" "$archivo" "$CNC"
    else
        printf "%s%s%s failed to be copied. You must copy it manually.%s\n" "$BLD" "$CRE" "$archivo" "$CNC"
        sleep 1
    fi
done

for archivos in ~/dotfiles/themes/*; do
	sudo cp -R "${archivos}" /usr/share/themes/
	if [ $? -eq 0 ]; then
		printf "%s%s%s folder copied succesfully!%s\n" "${BLD}" "${CGR}" "${archivos}" "${CNC}"
	else
		printf "%s%s%s failed to been copied, you must copy it manually%s\n" "${BLD}" "${CRE}" "${archivos}" "${CNC}"
		sleep 1
	fi
done

for archivos in ~/dotfiles/home/*; do
	sudo cp -R "${archivos}" ~/
	if [ $? -eq 0 ]; then
		printf "%s%s%s file copied succesfully!%s\n" "${BLD}" "${CGR}" "${archivos}" "${CNC}"
	else
		printf "%s%s%s failed to been copied, you must copy it manually%s\n" "${BLD}" "${CRE}" "${archivos}" "${CNC}"
		sleep 1
	fi
done
printf "%s%sDone!\n\n" "${BLD}" "${CGR}" "${CNC}"
sleep 2
clear

# Install Nvim 
logo "Installing Neovim.."
git clone --depth 1 https://github.com/AstroNvim/AstroNvim ~/.config/nvim
for archivos in ~/dotfiles/nvim/*; do
	sudo cp -R "${archivos}" ~/.config/nvim/lua/
	if [ $? -eq 0 ]; then
		printf "%s%s%s file copied succesfully!%s\n" "${BLD}" "${CGR}" "${archivos}" "${CNC}"
	else
		printf "%s%s%s failed to been copied, you must copy it manually%s\n" "${BLD}" "${CRE}" "${archivos}" "${CNC}"
		sleep 1
	fi
done
printf "%s%sDone!\n\n" "${BLD}" "${CGR}" "${CNC}"
sleep 2
clear

# Configuring dotfiles
logo "Configuring dotfiles"
chmod -R +x ~/.config/
printf "%s%sDone!\n\n" "${BLD}" "${CGR}" "${CNC}"
sleep 2
clear

# Configuring pacman (for what???)
logo "Configuring pacman (for what???)"
grep "^Color" /etc/pacman.conf >/dev/null || sudo sed -i "s/^#Color$/Color/" /etc/pacman.conf
grep "ILoveCandy" /etc/pacman.conf >/dev/null || sudo sed -i "/#VerbosePkgLists/a ILoveCandy" /etc/pacman.conf
printf "%s%sDone!\n\n" "${BLD}" "${CGR}" "${CNC}"
sleep 2
clear

# Enabling services
logo "Enabling services"
systemctl --user enable mpd.service
systemctl --user start mpd.service
sudo systemctl enable ly.service
sudo systemctl enable NetworkManager
systemctl --user enable pipewire pipewire-pulse wireplumber
printf "%s%sDone!%s\n\n" "${BLD}" "${CGR}" "${CNC}"
sleep 2
clear

# Restart
logo "Done!"
printf "%s%sThanks for using my config! %s\n" "${BLD}" "${CYE}" "${CNC}"
while true; do
	read -rp "Do you want to restart now? [y/n]: " yn
	case $yn in
	[Yy]*) reboot ;;
	[Nn]*) exit ;;
	*) printf "Just write 'y' or 'n'\n\n" ;;
	esac
done